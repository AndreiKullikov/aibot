import os
import requests
import openai
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)
logging.getLogger("telegram").setLevel(logging.DEBUG)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
SEARCH_ENGINE_ID = os.getenv("SEARCH_ENGINE_ID")
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID", "0"))

openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Google Custom Search API
def google_search(query: str) -> str:
    logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
    try:
        url = "https://www.googleapis.com/customsearch/v1"
        params = {
            "key": GOOGLE_API_KEY,
            "cx": SEARCH_ENGINE_ID,
            "q": query,
            "num": 3
        }
        response = requests.get(url, params=params, timeout=5)
        logger.info(f"–û—Ç–≤–µ—Ç Google API, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        response.raise_for_status()
        data = response.json()
        if "items" not in data:
            logger.info("–í –æ—Ç–≤–µ—Ç–µ Google API –Ω–µ—Ç 'items'")
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        results = []
        for item in data["items"]:
            title = item.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            snippet = item.get("snippet", "")
            link = item.get("link", "")
            results.append(f"{title}\n{snippet}\n{link}")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        return "\n\n".join(results)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}"

def should_search(text: str) -> bool:
    triggers = ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–ø–æ—Å–º–æ—Ç—Ä–∏", "search", "–≥–¥–µ", "–∫—Ç–æ", "—á—Ç–æ —Ç–∞–∫–æ–µ"]
    result = any(trigger in text.lower() for trigger in triggers)
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {result} (—Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}')")
    return result

def extract_query(text: str) -> str:
    for trigger in ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–ø–æ—Å–º–æ—Ç—Ä–∏", "search"]:
        if text.lower().startswith(trigger):
            query = text[len(trigger):].strip()
            logger.info(f"–ò–∑–≤–ª–µ—á—ë–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: '{query}'")
            return query
    logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—ë–Ω: '{text}'")
    return text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"/start –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    if user_id != ALLOWED_USER_ID:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª—å—Ç—É—à–∫–∞, —Ç–≤–æ—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–∏—Å–∫–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ üòâ. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_text = update.message.text
    logger.info(f"handle_message –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_text}'")

    if user_id != ALLOWED_USER_ID:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω.")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    if should_search(user_text):
        query = extract_query(user_text)
        if not query:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—Å–∫–∞—Ç—å.")
            return
        search_results = google_search(query)
        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. "
                    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é."
                )
            },
            {
                "role": "user",
                "content": (
                    f"–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–∞–π–¥–µ–Ω–Ω–∞—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n"
                    f"{search_results}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –±–µ–∑ –æ—Ç—Å—ã–ª–æ–∫ –∫ —Ç–æ–º—É, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å."
                )
            },
            {
                "role": "user",
                "content": user_text
            }
        ]
        try:
            response = await openai.ChatCompletion.acreate(
                model="gpt-4",
                messages=messages,
                temperature=0.7,
            )
            reply = response.choices[0].message.content
            logger.info(f"–û—Ç–≤–µ—Ç OpenAI —Å —É—á—ë—Ç–æ–º –ø–æ–∏—Å–∫–∞: {reply}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}"
        await update.message.reply_text(reply)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ OpenAI
        messages = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, "
                    "–ø–æ–º–æ–≥–∞—é—â–∏–π —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –¥—Ä—É–≥–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏."
                )
            },
            {
                "role": "user",
                "content": user_text
            }
        ]
        try:
            response = await openai.ChatCompletion.acreate(
                model="gpt-4",
                messages=messages,
                temperature=0.7,
            )
            reply = response.choices[0].message.content
            logger.info(f"–û—Ç–≤–µ—Ç OpenAI –±–µ–∑ –ø–æ–∏—Å–∫–∞: {reply}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            reply = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}"
        await update.message.reply_text(reply)

def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == "__main__":
    main()
