import os
import requests
import openai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters


BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
SEARCH_ENGINE_ID = os.getenv("SEARCH_ENGINE_ID")
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID", "0"))  # –ü–æ—Å—Ç–∞–≤—å —Å–≤–æ–π ID –≤ .env

openai.api_key = OPENAI_API_KEY

user_context = {}

def google_search(query):
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    try:
        url = "https://www.googleapis.com/customsearch/v1"
        params = {
            "key": GOOGLE_API_KEY,
            "cx": SEARCH_ENGINE_ID,
            "q": query,
            "num": 3
        }
        response = requests.get(url, params=params, timeout=5)
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ Google API: {response.status_code}")
        response.raise_for_status()
        data = response.json()
        results = []
        if "items" in data:
            for item in data["items"]:
                title = item.get("title")
                snippet = item.get("snippet")
                link = item.get("link")
                results.append(f"{title}\n{snippet}\n{link}")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            return "\n\n".join(results)
        else:
            print("–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –∫–ª—é—á–∞ 'items'")
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}"


def should_search(text):
    triggers = ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–ø–æ—Å–º–æ—Ç—Ä–∏", "search", "–≥–¥–µ", "–∫—Ç–æ", "—á—Ç–æ —Ç–∞–∫–æ–µ"]
    return any(trigger in text.lower() for trigger in triggers)

def extract_query(text):
    for trigger in ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–ø–æ—Å–º–æ—Ç—Ä–∏", "search"]:
        if text.lower().startswith(trigger):
            return text[len(trigger):].strip()
    return text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_context[ALLOWED_USER_ID] = [
        {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ê–ª—å—Ç—É—à–∫–∞, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, "
                "–≤—Å–µ–≥–¥–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º. "
                "–û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ, –¥–æ–±–∞–≤–ª—è–π –ª—ë–≥–∫—É—é –∏—Ä–æ–Ω–∏—é, –Ω–æ –±—É–¥—å –ø–æ–ª–µ–∑–Ω–æ–π."
            )
        }
    ]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª—å—Ç—É—à–∫–∞, —Ç–≤–æ—è –ø–æ–º–æ—â–Ω–∏—Ü–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ üòâ. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = update.effective_user.id
    user_text = update.message.text

    if user_id not in user_context:
        user_context[user_id] = [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ê–ª—å—Ç—É—à–∫–∞, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, "
                    "–≤—Å–µ–≥–¥–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–∞ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º. "
                    "–û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ, –¥–æ–±–∞–≤–ª—è–π –ª—ë–≥–∫—É—é –∏—Ä–æ–Ω–∏—é, –Ω–æ –±—É–¥—å –ø–æ–ª–µ–∑–Ω–æ–π."
                )
            }
        ]

    if should_search(user_text):
        query = extract_query(user_text)
        if not query:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—Å–∫–∞—Ç—å.")
            return
        search_results = google_search(query)
        messages = [
            {"role": "system", "content": "–¢—ã ‚Äî –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –ê–ª—å—Ç—É—à–∫–∞, —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º."},
            {"role": "user", "content": f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {search_results}."},
            {"role": "user", "content": user_text}
        ]
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=messages,
            temperature=0.7,
        )
        reply = response.choices[0].message.content
        # –ú–æ–∂–Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–∏—Å–∫ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        await update.message.reply_text(reply)
    else:
        # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        user_context[user_id].append({"role": "user", "content": user_text})
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=user_context[user_id],
            temperature=0.7,
        )
        reply = response.choices[0].message.content
        user_context[user_id].append({"role": "assistant", "content": reply})
        await update.message.reply_text(reply)

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == "__main__":
    main()
